    // public String bfs() {
	// 	long startTime = System.currentTimeMillis();
	// 	int totalNode = 1;
	// 	int redundant = 0;
    //     String path = "";
	// 	SearchNode node = new SearchNode(null, this.initState, 0, '\0'); //node with state=problem.INITIAL-STATE, PATH-COST = 0
	// 	if (node.getState().isGoal(targets)) //if problem.GOAL-TEST(node.state) then return SOLUTION(node)
	// 		return buildSolution(node);
		
	// 	Set<State> explored = new HashSet<State>(); //empty set
	// 	Queue<SearchNode> fringe = new LinkedList<SearchNode>();
	// 	fringe.add(node);
	// 	ArrayList<String> actions;
	// 	SearchNode child;
	// 	while (!fringe.isEmpty()) {
	// 		node = fringe.poll(); //node <- POP(frontier)
	// 		//System.out.println("Player at ("+n.state.player.row+","+n.state.player.col+")");
	// 		explored.add(node.getState()); //add node.STATE to explored
			
	// 		actions = getActionList(node.getState()); //get actions
	// 		for (int i=0; i<actions.size(); i++) { //for each action in problem.ACTIONS(node.STATE) do
	// 			child = getChild(node, actions.get(i).charAt(0)); //child <- CHILD-NODE(problem,node,action)
	// 			if(child!=null && child.getState()!=null) {
	// 				totalNode++;
	// 				//if child.STATE is not in explored or fringe, then
	// 				if ((!explored.contains(child.getState()))&&(!fringe.contains(child))) {
	// 					path = buildSolution(node);
	// 					if (child.getState().isGoal(targets))
	// 						return path;
	// 					if (!child.getState().isDeadlock(mapData)) // check deadlock state
	// 						fringe.add(child);
	// 				}
	// 				else
	// 					redundant++;
	// 			}
	// 		}
	// 	}
	// 	return path;
	// }

	        // // u
        // newPlayer = getNewPosition(state.getPlayerPosition(), 'u');
        // newBox = getNewPosition(newPlayer, 'u');
        
        // if (!this.walls.contains(newPlayer)) {
        //     // if there's no box on top of the player or there is a box but there's no box or wall stopping it.

        //     if (!crates.contains(newPlayer) || (crates.contains(newPlayer) && (!crates.contains(newBox) && !walls.contains(newBox)))) {
        //         actions.add("u");
        //     }
        // } 

        // // d
        // newPlayer = getNewPosition(state.getPlayerPosition(), 'd');
        // newBox = getNewPosition(newPlayer, 'd');
        
        // if (!this.walls.contains(newPlayer)) {
        //     // if there's no box below the player or there is a box but there's no box or wall stopping it.

        //     if (!crates.contains(newPlayer) || (crates.contains(newPlayer) && (!crates.contains(newBox) && !walls.contains(newBox)))) {
        //         actions.add("d");
        //     }
        // } 

        // // l
        // newPlayer = getNewPosition(state.getPlayerPosition(), 'l');
        // newBox = getNewPosition(newPlayer, 'l');
        
        // if (!this.walls.contains(newPlayer)) {
        //     // if there's no box to the left of the player or there is a box but there's no box or wall stopping it.
 
        //     if (!crates.contains(newPlayer) || (crates.contains(newPlayer) && (!crates.contains(newBox) && !walls.contains(newBox)))) {
        //         actions.add("l");
        //     }
        // } 

        // // r
        // newPlayer = getNewPosition(state.getPlayerPosition(), 'r');
        // newBox = getNewPosition(newPlayer, 'r');
        
        // if (!this.walls.contains(newPlayer)) {
        //     // if there's no box to the right of the player or there is a box but there's no box or wall stopping it.

        //     if (!crates.contains(newPlayer) || (crates.contains(newPlayer) && (!crates.contains(newBox) && !walls.contains(newBox)))) {
        //         actions.add("r");
        //     }
        // } 

        //System.out.println("Is " + childNode.getState().hashCode() + " not seen? " + (!explored.contains(childNode.getState()) && !frontier.contains(childNode)));
        //System.out.println("Is it not a deadlock state " + !childNode.getState().isDeadlock(mapData));
        //System.out.println("Add node " + childNode.getState().getPlayerPosition().getX() + " " + childNode.getState().getPlayerPosition().getY());
        //System.out.println("Start " + initPlayer.getX() + " " + initPlayer.getY());